変数
===================================

命名規則
-----------------------------------

- Unicode文字, _ ではじめる
- Unicode文字, 数字, _ と続ける
- 大文字と小文字は区別する
- 慣例的に、キャメルケースを使う
- 公開範囲
	- 関数内で宣言されたものは、関数localな変数
	- 関数外で宣言されたものは、パッケージすべてのファイルからみれる
		- 大文字始まり: exported(公開) : パッケージを超えて参照できる
		- 小文字始まり: パッケージ内のみ


宣言の種類
-----------------------------------

- var: 変数
- const: 定数
- type: 構造体/型宣言
- func: 関数


変数宣言
-----------------------------------

.. code-block:: go

    var s string // 変数宣言
    s := ""      // 省略変数宣言

- 変数が明示的に初期化されていない場合、各型のゼロ値に初期化される
- 省略変数宣言は、パッケージレベルの変数には使えない


ポインタ
-----------------------------------

- C言語と同じ宣言と使い方
- どの型に対するポインタも、ゼロ値はnil
- 関数で、関数内のローカル変数のポイントを返すのはあり
	- ポインタは、関数内のローカル変数を指す

new関数
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- C言語で言うところのmalloc関数的なやつ

.. code-block:: go

    p := new(int)

- 引数の型のポインタを返す
- *pはゼロ値
- newで宣言した場合、一意のポインタを返す
- struct{}, [0]int などの何の情報も含まない大きさがゼロの同じ型の変数は、同じアドレスを持つ可能性がある


変数の生存時間
-----------------------------------

- パッケージ変数: プログラムが終了するまで
- ローカル変数: 到達不可能になるまで生存し続ける


スコープ
-----------------------------------

- 変数を参照する範囲
	- ユニバーサルブロック
		- ソースコード全体
	- レキシカルブロック
		- パッケージ
		- ファイル
		- 関数
		- {} で囲まれた範囲
- レキシカルブロック -> ユニバーサルブロック に参照しようとする変数を探しに行く
	- 見つからなければ、「未宣言の名前 undeclared name」エラーを吐く
- レキシカルブロック内の宣言は、そのブロックの外側からは見えない
- 個々の宣言が異なるレキシカルブロックであれば、同じ名前の宣言がいくつあっても良い
- 変数の生存期間とは違う

