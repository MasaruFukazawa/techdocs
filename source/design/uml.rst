UML
===========================================================

.. contents:: 目次
   :depth: 1
   :local:


ユースケース図
-----------------------------------------------------------

目的
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- システムの要件（ユースケース）と利用者（アクター）の関係を可視化し、システムの機能を俯瞰する

使用する工程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 要求分析

サンプル図
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. mermaid::

    graph LR
        subgraph アクター
            A[ライター]
            B[編集者]
        end

        subgraph CMSシステム
            UC1((記事を作成する))
            UC2((記事を提出する))
            UC3((記事を承認する))
            UC4((記事を公開する))
        end

        A --> UC1
        A --> UC2
        B --> UC3
        B --> UC4


クラス図
-----------------------------------------------------------

目的
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- クラスの情報やクラス間の関係からシステムの静的な構成を俯瞰する

使用する工程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 分析、アーキテクチャ設計、詳細設計、実装、テスト

.. mermaid::

    classDiagram

        class 部署 {
            +属性1
            +属性2
            +アクション1()
            +アクション2()
        }

        class 社員 {
            +属性1
            +属性2
            +アクション1()
            +アクション2()
        }

        部署 "1" --> "1..*" 社員 : 所属する


属性
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

操作
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

可視性
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. csv-table::
   :header: "記号", "表現", "意味"

   "``+``", "public", "すべてのクラスからアクセス可能"
   "``-``", "private", "自クラスのみアクセス可能"
   "``#``", "private", "自クラスと継承クラスからアクセス可能"
   "``~``", "package", "同一パッケージ内のクラスからアクセス可能"

誘導可能性
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

多重度
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. csv-table::
   :header: "多重度", "意味"

   "``1``", "1のみ"
   "``*``", "0以上"
   "``0..*``", "0〜"
   "``1..*``", "1〜"
   "``1,3,5``", "1 or 3 or 5"

関連端名
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

限定子
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

汎化
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. mermaid::

    classDiagram
        class 社員 {
            +属性
        }

        class 営業社員 {
            +アクション()
        }

        class 開発社員 {
            +アクション()
        }

        社員 <|-- 営業社員
        社員 <|-- 開発社員

関連
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 関係はあるけど、所有まではしない（永続的参照）

**集約**

弱い所有関係

- 一応属しているけどライフサイクルは独立

.. mermaid::

    classDiagram
        class 会社 {
            +String 名称
            +事業を展開する()
        }

        class 部署 {
            +String 名前
            +業務を行う()
        }

        会社 o-- 部署

**コンポジション**

強い所有関係 :

- 親オブジェクトが子オブジェクトの生成/消滅の責務を担う
- 親オブジェクトが消えると、子オブジェクトも一緒に消えるような関係

.. mermaid::

    classDiagram
        class 会社 {
            +String 名称
            +事業を展開する()
        }

        class 部署 {
            +String 名前
            +業務を行う()
        }

        会社 *-- 部署 

**依存**

- 一時的に使う

.. mermaid::

    classDiagram

        class 会社 {
            +String 名称
        }

        class 部署 {
            +String 部署名
        }

        class 社員 {
            +String 氏名
            +部署の名前を取得する()
        }

        社員 <.. 会社  : 雇用する
        社員 *-- 部署 : 所属部署
        会社 *-- 部署 : 所属部署

**インターフェイス**

.. mermaid::

    classDiagram
        class StorageServiceInterface {
            <<interface>>
            +save(file_name, data)
            +load(file_name)
        }

        class LocalStorage {
            +save(file_name, data)
            +load(file_name)
        }

        class S3Storage {
            +save(file_name, data)
            +load(file_name)
        }

        %% 実装クラスの関係
        StorageServiceInterface <|-- LocalStorage
        StorageServiceInterface <|-- S3Storage


シーケンス図
-----------------------------------------------------------

目的
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- システムの振る舞いがどのように実現されるかを時系列で見えるようにする

使用する工程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 分析、アーキテクチャ設計、詳細設計、実装、テスト

.. mermaid::

    sequenceDiagram
        actor User
        participant LoginPage
        participant LoginService
        participant PasswordChecker
        participant MemberList

        User ->> LoginPage: ユーザー名とパスワード入力
        LoginPage ->> LoginService: 認証リクエスト送信
        LoginService ->> PasswordChecker: パスワード照合
        PasswordChecker -->> LoginService: 照合結果（成功/失敗）
        alt 認証成功
            LoginService ->> MemberList: User情報取得
            MemberList -->> LoginService: User情報
            LoginService -->> LoginPage: 認証成功 & 会員ページに遷移
        else 認証失敗
            LoginService -->> LoginPage: 認証失敗メッセージ表示
        end

ライフライン
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 相互作用に登場する「分類子」と「役割」を表現する役割

.. note::

    役割名 : 分類子名(アクター/クラス名/コンポーネント名)

メッセージ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ライフライン間の相互作用を表現する役割

.. note::

    属性 = メッセージ名 (引数1, 引数2, ...) : 戻り値
    
    (属性、引数、戻り値は省略可能)


メッセージの種類
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. csv-table::
   :header: "メッセージの種類", "表現 : mermaid", "意味"

   "同期メッセージ", "頭に塗りつぶした三角形の矢印がついた実線", "呼び出し元が応答を待つ"
   "非同期メッセージ", "矢印がついた実線", "呼び出し元が応答を待たない"
   "戻り値メッセージ", "矢印がついた破線", "呼び出し元に戻る"
   "非同期戻り値メッセージ", "矢印がついた破線", "呼び出し元に戻る"
   "生成メッセージ", "矢印がついた破線", "オブジェクトを生成する"
   "ファウンドメッセージ", "始点に黒円、終点に矢印のついた実線", "送信側のライフラインを明示しない"
   "破棄メッセージ", "ライフラインの終点に x をつける", "オブジェクトを破棄する"

結合フラグメント
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 1つ以上のメッセージをグループ化する


**ループの例**

.. mermaid::

    sequenceDiagram
        participant User
        participant System

        loop ファイルを1件ずつ処理
            User->>System: ファイルアップロード
            System-->>User: 結果を返す
        end


**条件分岐の例**

.. mermaid::

    sequenceDiagram
        participant User
        participant System

        User->>System: 認証リクエスト
        alt 認証成功
            System-->>User: 認証成功
        else 認証失敗
            System-->>User: 認証失敗
        end


**相互作用の例**

.. mermaid::

    sequenceDiagram
        participant User
        participant System

        User->>System: 認証リクエスト

        alt 認証成功
            System-->>User: 認証成功
        else 認証失敗
            System-->>User: 認証失敗
        end

        opt 認証成功の時
            User->>System: ユーザ情報取得
        end


**ループの中のブレイクの例**

.. mermaid::

    sequenceDiagram
        participant User
        participant System

        loop ファイルを1件ずつ処理
            User->>System: ファイルアップロード
            System-->>User: 結果を返す

            alt 処理中にエラーが発生した場合
                break エラーが発生した場合
                    System-->>User: エラーを返す
                end
            end
        end


**並列処理の例**

.. mermaid::

    sequenceDiagram
        participant User
        participant ChatClient
        participant ChatServer

        User->>ChatClient: チャットアプリ起動
        ChatClient->>ChatServer: チャットサーバに接続
        ChatClient->>User: チャット画面表示
        par チャットメッセージ受信
            ChatServer-->>ChatClient: チャットメッセージ受信
            ChatClient-->>User: チャットメッセージ表示
        and チャットメッセージ送信
            User->>ChatClient: チャットメッセージ送信
            ChatClient->>ChatServer: チャットメッセージ送信
        end


**クリティカルセクションの例**

.. mermaid::

    sequenceDiagram
        participant User
        participant PaymentService
        participant Inventory

        User->>PaymentService: 注文確定
        critical 在庫の確保
            PaymentService->>Inventory: 在庫をロック
            Inventory-->>PaymentService: OK
        end
        PaymentService-->>User: 決済完了


アクティビティ図
-----------------------------------------------------------

- 各アクターの 各「アクション」を「制御フロー」でつなげていく

目的
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 制御、オブジェクト、データのフローを表現する

使用する工程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 要求分析、分析、アーキテクチャ設計、実装

サンプル図
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. mermaid::

    flowchart TD
        %% レーン：ライター
        subgraph ライター
            A1[記事を書く]
            A2[記事を提出]
        end

        %% レーン：編集者
        subgraph 編集者
            B1[記事を確認]
            B2{承認する？}
            B3[修正依頼]
        end

        %% レーン：CMS
        subgraph CMS
            C1[公開予約に登録]
            C2[公開処理]
        end

        %% フロー
        A1 --> A2
        A2 --> B1
        B1 --> B2
        B2 -- はい --> C1
        B2 -- いいえ --> B3
        B3 --> A1
        C1 --> C2


アクティビティ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- アクティビティは、アクティビティ図の中で実行される処理を表す

アクションと制御フロー
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**アクション**

- アクションは、アクティビティの中で実行される処理を表す

**制御フロー**

- 制御フローは、アクティビティの中での処理の流れを表す


ステートマシン図
-----------------------------------------------------------

目的
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- システムやクラスの持つ状態とその振る舞いの関係を可視化し、状態と遷移の関係を分析・設計を行う

使用する工程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 要求分析、分析、詳細設計、テスト

サンプル図
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. mermaid::

   stateDiagram-v2
       [*] --> 下書き

       state 下書き {
           state "entry / 新規記事テンプレートを作成" as 下書き_entry
       }

       下書き --> 提出済み : ユーザーが提出

       state 提出済み {
           state "entry / タイムスタンプを記録" as 提出済み_entry
       }

       提出済み --> 承認中 : 編集者が確認
       承認中 --> 承認済み : 承認される
       承認中 --> 差し戻し : 差し戻される

       差し戻し --> 下書き : 修正して再提出

       state 公開予約 {
           state "entry / 公開タイマーをセット" as 公開予約_entry
       }

       承認済み --> 公開予約 : 公開スケジュール登録
       公開予約 --> 公開済み : 公開実行
       公開済み --> [*]


