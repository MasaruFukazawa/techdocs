修正容易性と可読性
========================================

修正容易性とは
----------------------------------------

システムの変更のしやすさを表す


品質特性
----------------------------------------

- 可読性
- モジュール性
- 再利用性
- 保守性


可読性
----------------------------------------

ソースコードは、新規で開発するより、すでにあるものを改修することが多いです。

改修するには、ソースコードを読み、仕組みを理解し、どこに手を加えればよいかという判断が必要になります。

ソースコードが読みにくいと、解読が困難になり、仕組みの理解に苦しみ、どこに手を加えればよいかという判断が難しくなります。

判断が難しくなると、バグを発生させる原因にもなります。

ソースコードは、他人 (半年後の自分)がみても理解できるように書く必要があります。

Well-written
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 変数や関数が理解しやすい名前で定義する
    - 役割が表す説明的な名前をつける必要がある
        - 変数には、名刺的な名前をつける
        - 関数には、能動的な名前をつける
    - 略語を使わない    

- 単純な構文 / ロジックを使う
    - 1行、80文字程度に収める
    - 1関数、50行程度に収める
        - スクロールせずに表示できる範囲
    - ネストを深くしない
        - 3階層以上深くなるなら、処理の見直しをしよう
            - 分割
            - 関数化
    - 構造がわかるようにインデントしよう
    - インデのスタイルを統一しようント
        - スペースを使うか / スペースを使うか
    - ブレース ( {}の位置 ) のスタイルを統一しよう
    - 条件式に否定が含まれていると、間違いなくわかりづらい
    - 括弧を使って曖昧さを解消しよう
    - 複雑な式は分割しよう
    - なんでもかんでもワンライナーで書かない
    - 慣用句（イディオム、習慣的な記述）によって一貫性を確保しよう
    - 多分岐の判定には、else-if を使おう
    - マジックナンバーには名前をつけよう
        - 必要なら、定数として設定しよう

- コメント
    - 当たり前のことをいちいち書かない
    - ファイル、クラス、関数、グローバル変数にコメントを書く
    - 悪いコードにコメントを付けるな。書き直せ
    - コードと矛盾させない
    - コードを改修したら、コメントも改修
    - 明快に書く、混乱を招くな
        - 文章ではなく、箇条書きでよい


Well-documented
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

インラインドキュメント

- コードコメント
    - 処理の説明を記述する

.. code-block:: php

    <?php

    /**
     * 以下の実装で
     *     何をやっているのか
     *     なぜこの実装にしているか
     */

    // 初期化                                                                                                                                                                                                                                                             
    $accept_list = NULL;
    $m_user = new M_user();

    // リクエストデータ取得                                                                                                                                                                                                                                               
    $data = $request->all();

    // ユーザ情報取得                                                                                                                                                                                                                                                     
    $user_info = $m_user->getUserInfo(Auth::user()->getOriginal()['user_id']);

    // 検索結果表示用のフラグ                                                                                                                                                                                                                                             
    $request->session()->put('search_accept_flg', TRUE);


- 関数コメント
    - 関数が、何をやっているかの説明
    - 関数が受け取る引数についての説明
    - 関数の戻り値についての説明

.. code-block:: php

    <?php

    /**
     * ユーザDBからユーザを取得する
     * 引数:
     *     $id: ユーザID (int)
     * 戻値:
     *     ユーザ情報
     */
    function getUserInfo($id=null)
    {
    
        $user_model = new User();

        $user = $user_model->get($id);

        return $user;
    }


- クラスコメント

.. code-block:: php

    <?php 

    /**
     * ユーザ情報DB操作クラス
     * メソッド:
     *     get_by_id: ユーザIDからユーザを取得する
     *     search: ユーザを検索する
     */
    class User
    {

        /**
         * ユーザDBからユーザを取得する
         * 引数:
         *     $id: ユーザID (int)
         * 戻値:
         *     ユーザ情報
         */
        public function get_by_id($id=null)
        {
        
        }

        /**
         * ユーザDBから検索する
         * 引数:
         *     $conditions: 検索条件 (array)
         * 戻値:
         *     ユーザ情報のリスト
         */
        public function search($conditions=[])
        {
        
        }

    }


- モジュールコメント

.. code-block:: php

    <?php 
    /**
     * ユーザに関するDB操作クラスを定義する
     * 
     * クラス: 
     *     User: ユーザクラス
     *     Career: 経歴クラス
     * 
     */

    /**
     * ユーザ情報DB操作クラス
     * メソッド:
     *     get_by_id: ユーザIDからユーザを取得する
     *     search: ユーザを検索する
     */
    class User
    {

        /**
         * ユーザDBからユーザを取得する
         * 引数:
         *     $id: ユーザID (int)
         * 戻値:
         *     ユーザ情報
         */
        public function get_by_id($id=null)
        {
        
        }

        /**
         * ユーザDBから検索する
         * 引数:
         *     $conditions: 検索条件 (array)
         * 戻値:
         *     ユーザ情報のリスト
         */
        public function search($conditions=[])
        {
        
        }

    }

    /**
     * ユーザに紐づく経歴を操作するクラス
     * メソッド:
     *     get_by_user_id: ユーザに紐づく経歴を操作するクラス
     *
     */
    class Career
    {

        /**
         * 経歴DBからユーザを取得する
         * 引数:
         *     $user_id: ユーザID (int)
         * 戻値:
         *     経歴情報
         */
        public function get_by_user_id($user_id=null)
        {
        
        }

    }


外部ドキュメント

- ソースコードの使い方
- 更新内容
- インストール手順
- デプロイ方法


ユーザマニュアル

- システムを使うユーザのために、画像やテキストを使用して書かれた文章


Well-formatted
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 各言語ごとに存在するコーディング規約にそって、プログラミングを行う
    - PHP 
        - http://ja.phptherightway.com/#code_style_guide
        - PHP_CodeSniffer / PHP Code Beautifier and Fixer を使うことでチェックと修正を行うことができる
        - https://github.com/jupeter/clean-code-php
    - javascript
        - Google製
            - http://cou929.nu/data/google_javascript_style_guide/


可読性のアンチパターン
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- コメントが不十分
    - モジュール / パッケージについてのコメントがない
    - 関数についてのコメントがない
    - 実装についてのコメントがない

- 言語のベストプラクティスに反するコード
    - 慣用的な記述方法の沿っていない

- プログラムのアンチパターン
    - スパゲッティコード
        - 設計や制御構造/アルゴリズムが複雑なシステムのことを指す
        - クラス/関数を使わず、goto文を使い、処理を横断する
        - 曖昧な例外処理も理解を困難にする

    - 大きな泥だんご
        - 全体構造や目的が理解しにくいシステムのこと
        - ドキュメント / コメントがない
        - 複数の開発者がアップデートを重ねていくとなりやすい

    - コピー&ペーストプログラミング
        - クラス化/関数化せずに、同じ処理があらゆる箇所に点在する

    - エゴプログラミング
        - 会社で規定したルールに沿わない、自分スタイルで行う開発


ベストプラクティス
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    - php
        - http://ja.phptherightway.com/