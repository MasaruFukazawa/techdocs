テスト駆動開発
=======================================


TDDを習得するメリット
---------------------------------------

* 予測可能な開方法である

  * 完了時期が把握できる

  * 長いバグの追跡を心配する必要がない

* コードからノウハウを得ることができる

  * リファクタリングを繰り返すことで最適な設計・実装ができる

* コードを書くのが心地よくなる

* チームメイトとの信頼関係が築ける


TTDの規則
---------------------------------------

* 有機的な設計をする

  * フィードバックとリファクタリングの繰り返し

* 自分でテストを作成する

* 開発環境は小さな変更に対する迅速なビルドをサポートする

* テストを容易にする

  * 高凝縮・粗結合なモジュール・コンポーネントを作成する


TDDの対象
---------------------------------------

* モデルクラス

* バリデーションクラス

* ドメインクラス

* アプリケーションクラス

* ユーティリティ

* コントローラ

* ビュー

TTDのサイクル
---------------------------------------


機能についてのテストケースを上げる
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* 実装する機能についての必要なテストケースをTODOリストに上げる

  * 入力チェッククラスのテスト

  * テーブルへの登録、変更、削除

* 必要応じてテストケースを追加する


レッド（テストを失敗させる）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* 実装予定の機能についてテストを実装する

* 実装予定の機能がどこ（ファイル・モジュール・クラス）に属するか決定する

* 実装予定の機能のインターフェースを考える

  * 期待する入力がどのようなものか決定する

  * 期待する出力がどのようなものか決定する

* 論理式・assert でチェックを行う

* 想定される例外をチェックする場合は、例外が起こらないことをエラーとする


グリーン（テストを成功させる）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* 最優先事項はテストをパスさせること

* リテラルの利用、処理の重複などには目を瞑る

* テストケースで期待された値を返すだけの処理でも構わない


リファクタリング（コードを正しくする）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* 本実装を行う

  * 一度、テストが成功してグリーンとなったソースコードを見直す

  * リテラル、重複した処理を取り除く


テスト結果のパタンを増やす
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* 成功となるパタンを書く

* エラーとなるパタンを書く


テストに使用するデータ
---------------------------------------

**よいデータ**

- ユーザがよく使いそうなデータ
- ブログラムが許可する最小のデータ
- ブログラムが許可する最大のデータ
- ゼロ
- null
- 5cデータ（日本語が入力可能の場合）

**わるいデータ**

- 非常に小さなデータ（-999999999、0.00000001）
- 非常に大きなデータ（999999999）
- 長いデータ（abcdefghijklmnopqrstu.txtなど）
- 無効なデータ

テストデータの用意
---------------------------------------

- フィクスチャ : データの一括登録
- ファクトリ : ランダムなデータの用意
