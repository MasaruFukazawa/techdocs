Amazon Elastic Container Service
==========================================


.. contents:: 目次
   :depth: 1
   :local:


公式ドキュメント
------------------------------------------

`Amazon Elastic Container Service ドキュメント <https://docs.aws.amazon.com/ja_jp/ecs/>`_


タスク定義
------------------------------------------


`タスク定義 <https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/task_definitions.html>`_


**タスク定義はアプリケーションのブループリント**

- アプリケーションを形成するパラメータと **1 つ以上のコンテナ** を記述する JSON 形式のテキストファイル


**タスク定義の中で指定できるパラメータの一部**

`Fargate 起動タイプでの Amazon ECS タスク定義パラメータ <https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/task_definition_parameters.html>`_

- 使用する起動タイプ、これによりタスクをホストするインフラストラクチャを決定
- タスクの各コンテナで使用する Docker イメージ
- 各タスクで、またはタスク内の各コンテナで使用する CPU とメモリの量
- メモリと CPU の要件
- タスクが実行されるコンテナのオペレーションシステム
- タスクのコンテナで使用する Docker ネットワーキングモード
- タスクで使用するログ記録設定
- コンテナが終了または失敗した場合にタスクを実行し続けるかどうか
- コンテナの開始時に実行するコマンド
- タスク内でコンテナが使用するデータボリューム
- タスクで使用される IAMロール


**タスク定義は、タスクまたはサービスとして実行できる**

.. csv-table:: 
   :header: "項目", "説明"
   :widths: 20, 80

   "タスク", "クラスター内のタスク定義のインスタンス化"
   "サービス", "Amazon ECS クラスターで必要な数のタスクを同時に実行して維持する"


クラスタ
------------------------------------------

**タスク、サービスをまとめたもの**

クラスタは、以下のリソースで構成される

- インフラストラクチャキャパシティ
    - AWS クラウドでの (AWS Fargate) サーバーレス
    - クラウド内 AWS の Amazon EC2 instances
    - オンプレミス仮想マシン (VM) またはサーバ

- VPC およびサブネット（タスクとサービスが実行されるネットワーク）
    -  Amazon EC2 インスタンスを使用する場合は、サブネットはアベイラビリティゾーン、ローカルゾーン、Wavelength ゾーン、または AWS Outposts

- オプションの名前空間
    - 名前空間は、Service Connect とのサービス間通信に使用

- モニタリングオプション
    - CloudWatch Container Insights（Amazon ECS のメトリクスとログを自動で収集、集計、要約）


キャパシティープロバイダー
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Amazon ECS タスクライフサイクル
------------------------------------------

タスクは、手動またはサービスの一部として開始すると、自己終了するか手動で停止されるまでに、複数の状態を経由する。

.. image:: https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/images/task-lifecycle.png


タスク
------------------------------------------

- バッチプロセスなど、何らかの処理を実行した後に停止するアプリケーションがある場合、タスクとして実行する
- レートベース、cron ベース、または 1 回限りのスケジュールでアプリケーションを実行する必要がある場合は、EventBridge Scheduler を使用してスケジュールを作成する


タスクワークフロー
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


サービス
------------------------------------------

- タスク定義の指定した数のインスタンスを同時に実行して維持できる
    - タスクの 1 つが失敗または停止した場合、Amazon ECS サービススケジューラはタスク定義の別のインスタンスを起動してそれを置き換える

- オプションで、ロードバランサーの背後でサービスを実行することもできる
    - サービスに関連付けられたタスク間でトラフィックを分散させる


ブルー/グリーン デプロイ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- CodeDeploy によって制御される ブルー/グリーンデプロイモデルを使用する

**トラフィックを移行の方法**

- Canary
    - 最初の増分および間隔でトラフィックを更新済みタスクセットに移行する割合 (%) を分単位で指定できます。次に 2 回目の増分で残りのトラフィックを移行します。

- Linear
    - トラフィックは等しい増分で移行され、増分間の間隔 (分) も同じ
    - 事前定義された複数の線形オプションから選択し、増分ごとに移行するトラフィックの割合 (%) と増分間の間隔 (分) を指定する

- All-at-once
    - すべてのトラフィックを元のタスクセットから更新済みタスクセットに同時に移行する

**CodeDeploy のコンポーネント**

- CodeDeploy アプリケーション
    - CodeDeploy リソースのコレクション
    - 1 つ以上のデプロイグループで構成される

- CodeDeploy デプロイグループ
    - デプロイ設定。以下の構成要素を持っている
        - Amazon ECS クラスターとサービス
        - ロードバランサーのターゲットグループとリスナー情報
        - デプロイメントロールバック戦略
        - 


