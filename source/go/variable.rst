変数
===================================

命名規則
-----------------------------------

- 慣例的に、キャメルケースを使う
- Unicode文字, _ ではじめる
- Unicode文字, 数字, _ と続ける
- 大文字と小文字は区別する


宣言の種類
-----------------------------------

.. csv-table::

	var, 変数
	const, 定数
	type, 構造体/型宣言
	func, 関数


予約語
-----------------------------------

.. csv-table:: 

	break, default, func, interface, select
	case, defer, go, map, struct
	chan, else, goto, package, switch
	const, fallthrough, if, ranga, type
	continue, for, import, return, var


変数宣言
-----------------------------------

.. code-block:: go

    var s string // 変数宣言, 初期化: 空文字
    s := ""      // 省略変数宣言

    // インデックスを使わない時、_ をつかう                                                                                                                                                                                                                                   
    for _, arg := range os.Args[1:] {
        fmt.Println(arg)
    }

- 明示的に初期化されていない場合、各型のゼロ値に初期化される
	- 値を持つことを保証している
- 省略変数宣言は、パッケージレベルの変数には使えない
- 使わなれていないローカル変数は、コンパイルエラーとなる
	- ブランク識別子 ( _ ) をつかう
		- 変数は必要だけど、使わないときにつかう

ゼロ値
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. csv-table:: 

	数値, 0
	ブーリアン, false
	文字列, 空文字
	インタフェース, null
	スライス、ポイント、マップ、チャネル、関数, null


変数の生存時間
-----------------------------------

.. csv-table:: 

	パッケージ変数, プログラムが終了するまで
	ローカル変数, 到達不可能(unreachable)になるまで生存し続ける

- 関数の戻り値が、関数内で生成されたポインタである場合、外部から参照されるので、生き延びる
- グローバルなポインタに代入されている場合も同じ
- 生存期間は、到達可能かどうかでのみ決まる


公開範囲
-----------------------------------

- 関数内で宣言されたものは、関数localな変数
- 関数外で宣言されたものは、パッケージすべてのファイルからみれる
	- 大文字始まり: exported(公開) : パッケージを超えて参照できる
	- 小文字始まり: パッケージ内のみ


スコープ
-----------------------------------

- 変数を参照する範囲
	- ユニバーサルブロック
		- ソースコード全体
	- レキシカルブロック
		- パッケージ
		- ファイル
		- 関数
		- {} で囲まれた範囲
- レキシカルブロック -> ユニバーサルブロック に参照しようとする変数を探しに行く
	- 見つからなければ、「未宣言の名前 undeclared name」エラーを吐く
- レキシカルブロック内の宣言は、そのブロックの外側からは見えない
- 個々の宣言が異なるレキシカルブロックであれば、同じ名前の宣言がいくつあっても良い
- 変数の生存期間とは違う


代入
-----------------------------------

.. code-block:: go

	x,y = y, x
