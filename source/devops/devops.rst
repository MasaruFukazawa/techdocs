DevOps
==========================================


.. contents:: 目次
   :depth: 1
   :local:


目的
------------------------------------------

- 顧客に対して、安定していて、信頼できる、セキュアなサービスの提供
- 競争地図の急速な変化への対応
- 安全で回復力のある作業システムの構築


DevOpsは、組織の何かを改善しなければならない
------------------------------------------

| **プロジェクト進行のあり方**
| **機能追加しづらく、メンテナンスしずらいプロダクト**

開発vs運用:責務の対立
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 開発 : できる限り早く機能と変更をデプロイしたい
- 運用 : 本番環境を危険にさらすような変更を入れ込みたいくない

技術的負債
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 時間経過とともに解決しにくくなる
- 将来の選択肢を狭めていく

３つの悪循環
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**1. 技術的負債の発生**

| 逃げ道を通ることが当たり前になってしまった仕事のあり方であり、
| 時間があればなんとかしますという果たされない約束

- システムの複雑化
- テストコードがない
- ドキュメントのアップデート不備

困ったことに、こういう脆弱な成果物が、もっとも重要な収益装置になっている

**2. 技術的負債の増加**

- 納期優先と妥協
- 技術的負債の解消タイミングがない

**3. 技術的負債の増加が続く**

技術的負債の増加により、あらゆることが少しずつ難しくなっていく

- 仕事の時間の増加
- コミュニケーションの時間の増加
- 密結合なソースによる改修の難しさの増加

**変化させにくくなっている**

- すべてが徐々に困難になっていく


DevOpsのビジネスバリュー
------------------------------------------

機動力 と 信頼性 をともに高めていく

**スループットの指標**

- コードの変更とデプロイ
- コードの変更のデプロイリードタイム

**信頼性の指標**

- 本番デプロイ？不具合発生率？
- サービスの障害発生から復元するためにかかった平均時間

**組織の業績の指標**

- 生産性、マーケットシェア、利益性の目的達成
- 時価総額の増加


ITバリューストリーム
------------------------------------------

- ビジネス上の仮説を立案してから、顧客に価値を提供するサービスを生み出すまでの間に必要なプロセス
- 企業が顧客の要求に応えるために着手する一連の活動
- 顧客に届ける商品やサービスを設計、生産し、送り届けるために必要な一連の活動で、情報と素材の双方向的なフローを含む

高速で予測可能なリードタイムを実現するために

- 小さなバッチサイズ
- WIP(仕掛け)の削減
- 下流の工程に不良品を渡さないことによる出戻り防止
- 大きな目的に近づくためのシステムの絶え間ない改善
- スムーズな作業フローを作り出す

**プロセスにおけるインプット**

- ビジネスの目的
- コンセプト
- アイディア
- 仮説

**開発チーム**

- アジャイルのイテレータブルなプロセスを導入する
- アイディアをユーザストーリに、さらに機能仕様に落とし込む
- コードをレポジトリで管理する
- パイプラインを導入する
- 非機能テストもできる様にしておく


デプロイリードタイムを重視
------------------------------------------

**デプロイリードタイム**

- ユーザストーリを実装し、テストし、QA、IT運用、情報セキュリティを通って、本番環境にデプロイされ、顧客に価値を提供し、有益なフィードバックや遠隔測定データを生成したときに終わる

**設計と開発**

- 可変性と不確実性が高い
- 高度な創造性と再現できない作業が多い
- プロセスタイムの変動も大きい

**テストと運用**

- 創造性と専門知識を必要とする
- 予測可能性と機械的な性質(繰り返し)を追求する
- 可変性と最小限に抑えたアウトプットの生成を目標とする
- 設計/開発の中にテスト/運用を組み込む
- 高速フロー、高品質を実現することを目標とする

上記が成功するのは、小さなバッチサイズで仕事を進め、バリューストリームのあらゆる部分で品質を保証しておくときに限られる


リードタイムとプロセスタイムの定義
------------------------------------------

**リードタイム**

- 顧客が要求をしたときから、その要求が満たされるまでの時間

**プロセスタイム**

- 顧客の要求のために実際に作業した時間


フローの原則
------------------------------------------

作業の可視化
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


WIP（仕掛り）の制限
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


バッチサイズの縮小
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


受け渡しの数の削減
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


絶えず制約条件を見つけ出して尊重する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

無駄と苦痛を取り除く
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**無駄と苦痛**

- 結果に影響を及ぼさずに省略できる工程
- 顧客への価値の提供が遅れる原因になるあらゆるモノ

**部分的に完成した仕事**

- 完成せずに、溜まっている仕事

**余分な処理**

- 顧客への付加価値を産まない作業

**余分な機能**

**タスクの切り替え**

**待機**

**動作**

**不良**

**非標準的な作業や手作業**

**超人的な作業**

- 組織が目標を達成するために、個人やチームが不合理なことをしなければならない作業


フィードバックの原則
------------------------------------------

**我々の目的は、安全で回復力のある作業システムの構築である**

- 高品質、高信頼性、安全師を実現するためには、すばやいフィードバックループを作ることが必要
- 問題の発生と同時に組織が一丸になって問題解決にあたり、新しい知識、知恵を生み出し、上流での品質を確保し、下流のワークセンターのための最適な出力を作ることが必要


発生と同時に問題を知る
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**目的**

- 設計と運用の前提条件を絶えず検証しなければならない
- できるかぎり多くの分野からスピーディ、コストをかけずにできるかぎり因果関係を明確にする
- 作業システムに流れてくる情報フローを増やす
- 前提条件の無効性を明らかにすればするほど、問題を早く見つけて修復できるようになり、回復力、俊敏性、学習とイノベーションの能力を高めることができる

**フィードバック/フィードフォワード ループを作る**

- ITバリューストリーム（ 製品管理、開発、品質保証、情報セキュリティ、運用 ）で、スピーディなフィードバック/フィードフォワードが働くようにすること

  - 自動ビルド、インテグレーション、デプロイ の工程も含まれる

- フィードバックループを短くすることで、問題を早期に発見し、解決できるようにする

**トヨタ生産方式を支える因果関係**

複雑なシステムでより安全に作業するための取り組み

- 設計や運用の問題が明らかになるような方で複雑な仕事を管理している
- 問題が発生したときに組織が一丸になって解決にあたり、新しい知識をすばやく構築していく


上流での品質確保を追求する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**まずい品質保証**

- 面倒でエラーを起こしやすい手作業ををほかのチームにしてもらわなければならないが、実際にはその仕事は自動化でき、作業を必要とするチームが必要に応じて実行できるはずのもｎ
- 仕事から距離のある忙しい人物の承認が必要であるが、その人自体が仕事の内容や影響範囲についての十分な知識がないまま判断しなければならない
- 疑問点を詳細に書き込んだ膨大なドキュメントを作るが、書いた直後から陳腐化していく
- 承認を受けたり、作業をしてもらうために、特別な委員会やチームによる大きなバッチでの仕事を押し付け、返事を待っている

バリューストリームに属するすべての人が、日常業務の一部として問題を解決することを必要とする

- 変更が設計通りに動作することについて保証が必要なら、提案された変更に対してピアレビューピアレビューを行う
- QAや情報セキュリティが行っている品質チェックをできるかぎり、自動化する
- デベロッパーにテスト実行をリクエストしたり、スケジューリングしたりしないで、オンデマンドでテストできるようにする


新しい知識を作り上げるために組織が一丸になって問題解決にあたる
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**目的**

- 問題が広がる前にそれを封じ込め、診断し、対処に当たること

その過程で、組織は当初の避けがたい無知を知識に入れ替えて、システムをためにうまく動かす方法について、
それまでになく深い知恵を築きあげる

- 「もっと時間があるとき」に解決を先延ばししない

  - 問題が下流に波及するのを防ぐ。下流まで波及すれば、問題解決のためにかかる費用や労力は指数的に増え、技術的負債を蓄積してしまう。
  - ワークセンターが新しい仕事を始めるのを防ぐ。仕事を始めれば、システムに新しいエラーを持ち込むことになる
  - その問題が解決されなければ、ワークセンターはつぎの作業でも同じ問題を起こし、必要な修理、作業が増える

- ローカルな問題によって全体の操業を停止することを意図的に認める

  - 組織全体で、学習を可能とする
  - 鮮度が落ちる : 時間が立つと、問題が起きたときに何が起きたのかを正確に再現することは不可能になる


下流のワークセンターのために最適な出力
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


継続的な学習と実験の法則
------------------------------------------


デプロイパイプラインの基礎を作る
------------------------------------------


システム全体で唯一の真正なレポジトリを作る
------------------------------------------

- すべてのアプリケーションコードと依存ファイル
- データベーススキーマ、アプリケーション参照データなどを作るためのスクリプト
- 環境作成ツールと、アーティファクト（AMIイメージなど）
- コンテンを作るために使うすべてのファイル
- サポートするすべての自動テスト、マニュアルテストのスクリプト
- コードのパッケージング、デプロイ、データベースのマイグレーション、環境のプロビジョニングをサポートするすべてのスクリプト
- プロジェクトのすべてのアーティファクト（要件文章、デプロイ手順書、リリースノート）
- クラウドのすべての設定ファイル（CloudFormationテンプレートなど）
- 複雑なサービスをサポートするインフラストラクチャを作成するために必要なその他のあらゆるスクリプト、構成/設定情報（エンタープライズサービスバス、DBMS、DNSゾーンファイル、ファイヤーウォールなどのネットワークデバイスの構成/設定ファイル）


修理するよりも再構築する方が簡単なインフラストラクチャを作る
----------------------------------------------------


本番に近い環境で動作することの確認も含めて「完成」というように「開発」の「完成」の定義を変える
--------------------------------------------------------------------------------

**完成とは**

- 正しく機能するコードを書き終え、インテグレートし、テストされ、動作し、いつでも本番環境にデプロイできる状態にあること


アジャイル開発
------------------------------------------


テスト駆動開発
------------------------------------------

- テストコード付きのソースコード

- 自動化テスト

  - ユニットテスト

    - xUnit

  - 結合テスト

    - Selenium


軽量なドキュメント
------------------------------------------

- 脱エクセル

- Markdown ドキュメント

- reST ドキュメント



クラウドインフラストラクチャ
------------------------------------------

- Infrastructure as Code

  - クラウドサービス

    - AWS / GCP / AZULE

  - インフラ構成管理

    - CloudFormation / Terraform

  - ミドルウェア/設定管理

    - Ansible

  - コンテナ/サーバレス

    - ECS / Docker

    - Lambda / ApiGateway

- 自動復旧

  - EC2AutoScaling


デプロイパイプラインの構築
------------------------------------------

- 継続的CI/CD

- バーション管理システム: GIT

- インフラ構築: CloudFormation

  - 構成/設定前の仮想マシンイメージでコンテナを作る

  - テンプレートから設定ファイルを生成する

  - サーバ、アプリケーション、サービスを再起動する

- ミドルウェア設定: Ansible

  - ミドルウェアのデプロイ、構成/設定を自動化する
  
- ビルド: CodeBuild

  - 自動テスト

  - 静的なソースコードチェック

  - コーティングスタイルチェック

  - ビルド

    - デプロイに適した形でコードをパッケージングする

- デプロイ: CodeDeploy

  - Blue/Greenデプロイ

  - 本番サーバにパッケージやファイルをコピーする

  - データベースのマイグレーションをスクリプト化し自動化する
    
  - システムが動作し、正しく構成/設定されていることを確かめるために自動スモークテストを実行する

  - テストプロシージャを実行する


学習の継続化
------------------------------------------

- バッチサイズを小さくしてフィードバッグを早くする

  - テストの自動化によるフィードバック

  - 
