集合
========================================

集合とは
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


集合の作り方
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- 0 個以上の要素をまとめて管理することができる型

- 要素の重複を許可しない

- 真偽値、None、数値、文字列、配列、辞書、集合などオブジェクトであれば、どのようで値でも要素に追加できる。
  

集合の作り方
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- set 関数を使う

.. code-block:: python

    >>> s = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> print(s)
    {1, 2, 3, 4, 5}


メソッド
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- 集合に要素を追加する

.. code-block:: python

    >>> s = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s.add(100)
    >>> print(s)
    {1, 2, 3, 4, 5, 100}


- 集合に要素を追加する

.. code-block:: python

    >>> s = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s.clear()
    >>> print(s)
    set()


- 浅いコピーを作る

.. code-block:: python

    >>> s1 = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> print(s)
    {1, 2, 3, 4, 5}
    >>> s2 = s1.copy()
    >>> print(s1)
    {1, 2, 3, 4, 5}
    >>> print(s2)
    {1, 2, 3, 4, 5}


- 差集合を求める

.. code-block:: python

    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s1.difference(s2)
    {100, 200, 300, 400, 500}

    # 元に集合を更新する
    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s1.difference(s2)
    >>> print(s1)
    {100, 200, 300, 400, 500}


    # ２つの集合の差集合をもとめる。
    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s1.symmetric_difference(s2)
    {100, 200, 300, 400, 500}
    >>> s2.symmetric_difference(s1)
    {100, 200, 300, 400, 500}

    # 集合を更新する
    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s1.symmetric_difference_update(s2)
    >>> print(s1)
    s1.symmetric_difference_update(s2)

    # 演算子で差集合を求める
    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, 5, 1000, 2000, 3000, 4000, 5000])
    >>> s1 - s2
    {100, 200, 300, 400, 500}
    >>> s2 - s1
    {1000, 2000, 3000, 4000, 5000}


- 要素を削除する

.. code-block:: python

    >>> s = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s.discard(100)
    >>> print(s)
    {1, 2, 3, 4, 5, 200, 300, 400, 500}


- ２つの集合の共通部分を取得する

.. code-block:: python

    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s1.intersection(s2)
    {1, 2, 3, 4, 5}

    # 元に集合を更新する
    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s1.difference_update(s2)
    >>> print(s1)
    {1, 2, 3, 4, 5}

    # 演算子でもとめる
    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, 5, 1000, 2000, 3000, 4000, 5000])
    >>> s1 & s2
    {1, 2, 3, 4, 5}


- ２つの集合の共通部分があるか

.. code-block:: python

    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1000, 2000, 3000, 4000, 5000])
    >>> s1.isdisjoint(s2)
    True
    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, ])
    >>> s1.isdisjoint(s2)
    False


- ２つの集合の差集合がないか

.. code-block:: python

    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500]) 
    >>> s2 = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s1.issubset(s2)
    False
    >>> s2.issubset(s1)
    True

 
- ２つの集合の差集合があるか

.. code-block:: python

    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500]) 
    >>> s2 = set([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
    >>> s1.issuperset(s2)
    True
    >>> s2.issubset(s1)
    False

 
- 集合の先頭から値を取得。集合からは削除する

.. code-block:: python

    >>> s = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s.pop()
    >>> print(s)
    {2, 3, 4, 5, 100, 200, 300, 400, 500}
    

- 指定した値を要素から削除する
  
.. code-block:: python

    >>> s = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s.remove(1)
    {2, 3, 4, 5, 100, 200, 300, 400, 500}
    

- 和集合を求める

.. code-block:: python

    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1000, 2000, 3000, 4000, 5000])
    >>> s1.union(s2)
    >>> {1, 2, 3, 4, 5, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000}

    # 集合を更新する
    >>> s1.update(s2)
    >>> {1, 2, 3, 4, 5, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000} 

    # 演算子で求める
    >>> s1 = set([1, 2, 3, 4, 5, 100, 200, 300, 400, 500])
    >>> s2 = set([1, 2, 3, 4, 5, 1000, 2000, 3000, 4000, 5000])
    >>> s1 | s2
    {100, 200, 300, 400, 500}
